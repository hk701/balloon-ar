// ‚úÖ ‰ΩøÁî® r128 ÁâàÊú¨
import * as THREE from 'https://cdnjs.cloudflare.com/ajax/libs/three.js/r128/three.module.js';

let scene, camera, renderer, balloons = [];
let video, videoTexture;
let analyser, audioData;
let isStarted = false;

init();
animate();

function init() {
  scene = new THREE.Scene();
  camera = new THREE.PerspectiveCamera(60, window.innerWidth / window.innerHeight, 0.1, 1000);
  camera.position.z = 5;

  renderer = new THREE.WebGLRenderer({ antialias: true });
  renderer.setSize(window.innerWidth, window.innerHeight);
  document.body.appendChild(renderer.domElement);

  // Ê∑ªÂä†ÂºÄÂßãÊåâÈíÆ
  const startButton = document.createElement('button');
  startButton.textContent = 'ÁÇπÂáªÂºÄÂßã AR ‰ΩìÈ™å üì±';
  startButton.style.cssText = `
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    padding: 20px 40px;
    font-size: 20px;
    background: #007bff;
    color: white;
    border: none;
    border-radius: 12px;
    cursor: pointer;
    z-index: 1000;
    font-family: -apple-system, BlinkMacSystemFont, sans-serif;
    box-shadow: 0 4px 12px rgba(0,0,0,0.15);
  `;
  document.body.appendChild(startButton);
  
  startButton.onclick = () => {
    startCamera();
    startButton.remove();
  };

  const light = new THREE.DirectionalLight(0xffffff, 0.6); // Èôç‰ΩéÂÖâÂº∫Â∫¶‰ªé 1.2 Âà∞ 0.6
  light.position.set(3, 3, 5);
  scene.add(light);
  
  // Ê∑ªÂä†ÁéØÂ¢ÉÂÖâÊù•ÂáèÂº±Èò¥ÂΩ±
  const ambientLight = new THREE.AmbientLight(0xffffff, 0.8); // Â¢ûÂä†ÁéØÂ¢ÉÂÖâ
  scene.add(ambientLight);

  // Á™óÂè£Â§ßÂ∞èÂèòÂåñÂ§ÑÁêÜ
  window.addEventListener('resize', onWindowResize);
}

function startCamera() {
  console.log('ÂºÄÂßãÂêØÂä®ÊëÑÂÉèÂ§¥...');
  console.log('Áî®Êà∑‰ª£ÁêÜ:', navigator.userAgent);
  console.log('ÊòØÂê¶ÊîØÊåÅgetUserMedia:', !!navigator.mediaDevices?.getUserMedia);
  
  // iPhone Safari ÁâπÊÆäÂ§ÑÁêÜ
  const isiPhone = /iPhone|iPad|iPod/.test(navigator.userAgent);
  console.log('ÊòØÂê¶‰∏∫iPhone:', isiPhone);
  
  // ÁÆÄÂåñÁöÑÁ∫¶ÊùüÔºåiPhone Safari Êõ¥ÂÖºÂÆπ
  const constraints = {
    video: { 
      facingMode: "environment",
      width: { ideal: 640, max: 1280 },
      height: { ideal: 480, max: 720 }
    }, 
    audio: true 
  };

  console.log('‰ΩøÁî®Á∫¶Êùü:', constraints);

  navigator.mediaDevices.getUserMedia(constraints)
    .then(stream => {
      console.log('Âº∫Âà∂ÂêéÁΩÆÊëÑÂÉèÂ§¥ÊàêÂäü');
      handleStream(stream);
    })
    .catch(err => {
      console.log("Âº∫Âà∂ÂêéÁΩÆÊëÑÂÉèÂ§¥Â§±Ë¥•ÔºåÂ∞ùËØïÊôÆÈÄöÊ®°Âºè", err);
      // Â¶ÇÊûúÂº∫Âà∂ÂêéÁΩÆÂ§±Ë¥•ÔºåÈôçÁ∫ßÂà∞ÊôÆÈÄöÊ®°Âºè
      return navigator.mediaDevices.getUserMedia({ 
        video: { facingMode: "environment" }, 
        audio: true 
      });
    })
    .then(stream => {
      if (stream) {
        console.log('ÊôÆÈÄöÊ®°ÂºèÊëÑÂÉèÂ§¥ÊàêÂäü');
        handleStream(stream);
      }
    })
    .catch(err => {
      console.log("ÊôÆÈÄöÊ®°Âºè‰πüÂ§±Ë¥•ÔºåÂ∞ùËØïÂâçÁΩÆÊëÑÂÉèÂ§¥", err);
      // iPhone ÊúâÊó∂ÂâçÁΩÆÊëÑÂÉèÂ§¥Êõ¥Á®≥ÂÆö
      return navigator.mediaDevices.getUserMedia({ 
        video: { 
          facingMode: "user",
          width: { ideal: 640 },
          height: { ideal: 480 }
        }, 
        audio: true 
      });
    })
    .then(stream => {
      if (stream) {
        console.log('ÂâçÁΩÆÊëÑÂÉèÂ§¥ÊàêÂäü');
        handleStream(stream);
      }
    })
    .catch(err => {
      console.log("ÂâçÁΩÆÊëÑÂÉèÂ§¥‰πüÂ§±Ë¥•ÔºåÂ∞ùËØïÊúÄÂü∫Êú¨Ê®°Âºè", err);
      // ÊúÄÁÆÄÂçïÁöÑÁ∫¶Êùü
      return navigator.mediaDevices.getUserMedia({ 
        video: true, 
        audio: true 
      });
    })
    .then(stream => {
      if (stream) {
        console.log('‰ªªÊÑèÊëÑÂÉèÂ§¥ÊàêÂäü');
        handleStream(stream);
      }
    })
    .then(stream => {
      handleStream(stream);
    })
    .catch(err => {
      console.error("ÊâÄÊúâÊëÑÂÉèÂ§¥Ê®°ÂºèÈÉΩÂ§±Ë¥•:", err);
      showError("ÊëÑÂÉèÂ§¥ËÆøÈóÆÂ§±Ë¥•ÔºåÁÇπÂáªÂ±èÂπïÂèØ‰ª•ÂàõÂª∫Ê∞îÁêÉ");
      // Â§áÈÄâÊñπÊ°àÔºö‰ΩøÁî®Á∫ØÈªëËâ≤ËÉåÊôØ
      scene.background = new THREE.Color(0x000000);
      // Âç≥‰ΩøÊ≤°ÊúâÊëÑÂÉèÂ§¥‰πüÂèØ‰ª•ÁÇπÂáªÂàõÂª∫Ê∞îÁêÉ
      addClickListener();
      isStarted = true;
    });
}

function showError(message) {
  const errorDiv = document.createElement('div');
  errorDiv.textContent = message;
  errorDiv.style.cssText = `
    position: absolute;
    top: 80px;
    left: 20px;
    right: 20px;
    background: rgba(255, 0, 0, 0.8);
    color: white;
    padding: 15px;
    border-radius: 8px;
    z-index: 1000;
    font-size: 16px;
    text-align: center;
  `;
  document.body.appendChild(errorDiv);
  
  // 5ÁßíÂêéÁßªÈô§ÈîôËØØ‰ø°ÊÅØ
  setTimeout(() => {
    if (errorDiv.parentNode) {
      errorDiv.parentNode.removeChild(errorDiv);
    }
  }, 5000);
}

function handleStream(stream) {
  console.log('Â§ÑÁêÜÊëÑÂÉèÂ§¥ÊµÅ...');
  console.log('ÊµÅËΩ®ÈÅì:', stream.getTracks().map(track => ({
    kind: track.kind,
    label: track.label,
    enabled: track.enabled,
    readyState: track.readyState
  })));
  
  video = document.createElement("video");
  video.setAttribute("playsinline", ""); // iPhone ÂøÖÈúÄ
  video.setAttribute("autoplay", "");
  video.setAttribute("muted", "");
  video.setAttribute("webkit-playsinline", ""); // ËÄÅÁâàÊú¨ iPhone
  video.muted = true;
  video.playsInline = true; // Á°Æ‰øùÂÜÖËÅîÊí≠Êîæ
  video.srcObject = stream;

  // Êõ¥ËØ¶ÁªÜÁöÑËßÜÈ¢ë‰∫ã‰ª∂ÁõëÂê¨
  video.onloadstart = () => console.log('ËßÜÈ¢ëÂºÄÂßãÂä†ËΩΩ');
  video.onloadedmetadata = () => {
    console.log('ËßÜÈ¢ëÂÖÉÊï∞ÊçÆÂä†ËΩΩÂÆåÊàê');
    console.log('ËßÜÈ¢ëÂ∞∫ÂØ∏:', video.videoWidth, 'x', video.videoHeight);
  };
  video.onloadeddata = () => {
    console.log('ËßÜÈ¢ëÊï∞ÊçÆÂä†ËΩΩÂÆåÊàê');
    console.log('ÂàõÂª∫ËßÜÈ¢ëÁ∫πÁêÜ...');
    try {
      videoTexture = new THREE.VideoTexture(video);
      videoTexture.minFilter = THREE.LinearFilter;
      videoTexture.magFilter = THREE.LinearFilter;
      videoTexture.format = THREE.RGBFormat;
      scene.background = videoTexture;
      console.log('ËßÜÈ¢ëÁ∫πÁêÜËÆæÁΩÆÊàêÂäü');
      showSuccess("ÊëÑÂÉèÂ§¥ÊàêÂäüÂêØÂä®ÔºÅ");
    } catch (textureError) {
      console.error('ËßÜÈ¢ëÁ∫πÁêÜÂàõÂª∫Â§±Ë¥•:', textureError);
      scene.background = new THREE.Color(0x000000);
      showError("ËßÜÈ¢ëÁ∫πÁêÜÂ§±Ë¥•Ôºå‰ΩøÁî®ÈªëËâ≤ËÉåÊôØ");
    }
  };
  video.oncanplay = () => console.log('ËßÜÈ¢ëÂèØ‰ª•Êí≠Êîæ');
  video.onplay = () => console.log('ËßÜÈ¢ëÂºÄÂßãÊí≠Êîæ');
  video.onplaying = () => console.log('ËßÜÈ¢ëÊ≠£Âú®Êí≠Êîæ');

  video.onerror = (e) => {
    console.error('ËßÜÈ¢ëÊí≠ÊîæÈîôËØØ:', e);
    console.error('ÈîôËØØËØ¶ÊÉÖ:', video.error);
    showError("ËßÜÈ¢ëÊí≠ÊîæÂ§±Ë¥•: " + (video.error?.message || 'Êú™Áü•ÈîôËØØ'));
  };

  // Âº∫Âà∂Êí≠Êîæ
  const playPromise = video.play();
  if (playPromise !== undefined) {
    playPromise.then(() => {
      console.log('ËßÜÈ¢ëÊí≠ÊîæÊàêÂäü');
    }).catch(e => {
      console.error('ËßÜÈ¢ëÊí≠ÊîæpromiseÂ§±Ë¥•:', e);
      showError("ËßÜÈ¢ëÊí≠ÊîæÂ§±Ë¥•: " + e.message);
    });
  }

  // Èü≥È¢ëÂ§ÑÁêÜ
  try {
    console.log('ÂºÄÂßãËÆæÁΩÆÈü≥È¢ë...');
    const audioContext = new (window.AudioContext || window.webkitAudioContext)();
    
    // iPhoneÈúÄË¶ÅÁî®Êà∑‰∫§‰∫íÂêéÊâçËÉΩÂêØÂä®Èü≥È¢ë‰∏ä‰∏ãÊñá
    if (audioContext.state === 'suspended') {
      console.log('Èü≥È¢ë‰∏ä‰∏ãÊñáË¢´ÊöÇÂÅúÔºåÂ∞ùËØïÊÅ¢Â§ç...');
      audioContext.resume().then(() => {
        console.log('Èü≥È¢ë‰∏ä‰∏ãÊñáÊÅ¢Â§çÊàêÂäü');
      });
    }
    
    const mic = audioContext.createMediaStreamSource(stream);
    analyser = audioContext.createAnalyser();
    analyser.fftSize = 256;
    analyser.smoothingTimeConstant = 0.8;
    mic.connect(analyser);
    audioData = new Uint8Array(analyser.frequencyBinCount);
    console.log('Èü≥È¢ëËÆæÁΩÆÂÆåÊàê');
    
    showSuccess("ÊëÑÂÉèÂ§¥ÂíåÈü≥È¢ëÂêØÂä®ÊàêÂäüÔºÅÂØπÁùÄÈ∫¶ÂÖãÈ£éËØ¥ËØùÈáäÊîæÊ∞îÁêÉ");
  } catch (audioError) {
    console.error('Èü≥È¢ëËÆæÁΩÆÂ§±Ë¥•:', audioError);
    showError("Èü≥È¢ëÂäüËÉΩ‰∏çÂèØÁî®ÔºåÁÇπÂáªÂ±èÂπï‰πüÂèØ‰ª•ÂàõÂª∫Ê∞îÁêÉ");
    // Ê∑ªÂä†ÁÇπÂáªÂàõÂª∫Ê∞îÁêÉÁöÑÂäüËÉΩ
    addClickListener();
  }
  
  isStarted = true;
}

function addClickListener() {
  // ÁÇπÂáªÂ±èÂπïÂàõÂª∫Ê∞îÁêÉÁöÑÂ§áÁî®ÂäüËÉΩ
  er.domElement.addEventListener('click', () => {
    if (balloons.length < 15) {
      console.log('ÁÇπÂáªÂàõÂª∫Ê∞îÁêÉ');
      addBalloon();
    }
  });
  
  renderer.domElement.addEventListener('touchstart', (e) => {
    e.preventDefault(); // Èò≤Ê≠¢ÂèåÈáçËß¶Âèë
    if (balloons.length < 15) {
      console.log('Ëß¶Êë∏ÂàõÂª∫Ê∞îÁêÉ');
      addBalloon();
    }
  });
}


function showSuccess(message) {
  const successDiv = document.createElement('div');
  successDiv.textContent = message;
  successDiv.style.cssText = `
    position: absolute;
    top: 80px;
    left: 20px;
    right: 20px;
    background: rgba(0, 255, 0, 0.8);
    color: white;
    padding: 15px;
    border-radius: 8px;
    z-index: 1000;
    font-size: 16px;
    text-align: center;
  `;
  document.body.appendChild(successDiv);
  
  // 3ÁßíÂêéÁßªÈô§ÊàêÂäü‰ø°ÊÅØ
  setTimeout(() => {
    if (successDiv.parentNode) {
      successDiv.parentNode.removeChild(successDiv);
    }
  }, 3000);
}

function onWindowResize() {
  camera.aspect = window.innerWidth / window.innerHeight;
  camera.updateProjectionMatrix();
  renderer.setSize(window.innerWidth, window.innerHeight);
}

function addBalloon() {
  const maxAttempts = 20;
  let x, z, scale;
  let positionAccepted = false;

  for (let attempt = 0; attempt < maxAttempts; attempt++) {
    // Êõ¥Â§ßÁöÑÂàÜÂ∏ÉËåÉÂõ¥
    x = (Math.random() - 0.5) * 8;
    z = -1 - Math.random() * 4; // Ê∞îÁêÉÂá∫Áé∞Âú®Êõ¥ËøúÁöÑ‰ΩçÁΩÆ (-1 Âà∞ -5)
    scale = 0.3 + Math.random() * 0.7; // ÈöèÊú∫Â§ßÂ∞è (0.3 Âà∞ 1.0)

    // Âü∫‰∫éÊ∞îÁêÉÂ§ßÂ∞èË∞ÉÊï¥ÊúÄÂ∞èË∑ùÁ¶ª
    const minDistance = scale * 0.8;
    const tooClose = balloons.some(b => {
      const dx = b.position.x - x;
      const dz = b.position.z - z;
      const distance = Math.sqrt(dx * dx + dz * dz);
      const requiredDistance = minDistance + b.userData.scale * 0.8;
      return distance < requiredDistance;
    });

    if (!tooClose) {
      positionAccepted = true;
      break;
    }
  }

  if (!positionAccepted) return;

  // ÂàõÂª∫Ê∞îÁêÉÔºå‰º†ÂÖ•Áº©ÊîæÂèÇÊï∞
  createSimpleBalloon(x, z, scale);
}

function createSimpleBalloon(x, z, scale) {
  // ÂàõÂª∫ÁÆÄÂçïÁöÑÊ∞îÁêÉÂá†‰Ωï‰Ωì‰Ωú‰∏∫Â§áÈÄâ
  const balloonGroup = new THREE.Group();
  
  // Ê∞îÁêÉ‰∏ª‰Ωì - Ê†πÊçÆscaleË∞ÉÊï¥Â§ßÂ∞è
  const balloonRadius = 0.25 * scale;
  const balloonGeometry = new THREE.SphereGeometry(balloonRadius, 16, 16);
  const balloonMaterial = new THREE.MeshLambertMaterial({ 
    color: 0xff0000  // Á∫¢Ëâ≤
  });
  const balloonMesh = new THREE.Mesh(balloonGeometry, balloonMaterial);
  balloonGroup.add(balloonMesh);
  
  // Ê∞îÁêÉÁ∫ø - Ê†πÊçÆscaleË∞ÉÊï¥Á≤óÁªÜÂíåÈïøÂ∫¶
  const stringThickness = 0.003 * scale;
  const stringLength = 0.4 * scale;
  const stringGeometry = new THREE.CylinderGeometry(stringThickness, stringThickness, stringLength, 4);
  const stringMaterial = new THREE.MeshBasicMaterial({ color: 0x333333 });
  const stringMesh = new THREE.Mesh(stringGeometry, stringMaterial);
  stringMesh.position.y = -balloonRadius - stringLength / 2;
  balloonGroup.add(stringMesh);
  
  // ËÆæÁΩÆ‰ΩçÁΩÆÂíåÁî®Êà∑Êï∞ÊçÆ
  balloonGroup.position.set(x, -3, z);
  balloonGroup.scale.set(scale, scale, scale);
  balloonGroup.userData.speed = 0.005 + Math.random() * 0.01;
  balloonGroup.userData.scale = scale; // ‰øùÂ≠òÁº©Êîæ‰ø°ÊÅØÁî®‰∫éÁ¢∞ÊíûÊ£ÄÊµã
  balloonGroup.userData.swayOffset = Math.random() * Math.PI * 2; // ÈöèÊú∫ÊëáÊëÜÂÅèÁßª
  
  scene.add(balloonGroup);
  balloons.push(balloonGroup);
}

function animate() {
  requestAnimationFrame(animate);

  if (isStarted && analyser) {
    analyser.getByteFrequencyData(audioData);
    const volume = audioData.reduce((a, b) => a + b, 0) / audioData.length;
    console.log('Èü≥Èáè:', volume); // Ë∞ÉËØïÈü≥ÈáèÊ£ÄÊµã
    if (volume > 40 && balloons.length < 15) { // Èôç‰ΩéËß¶ÂèëÈòàÂÄºÔºåÈôêÂà∂Ê∞îÁêÉÊï∞Èáè
      console.log('ÂàõÂª∫Êñ∞Ê∞îÁêÉ'); // Ë∞ÉËØïÊ∞îÁêÉÂàõÂª∫
      addBalloon();
    }
  }

  for (let i = balloons.length - 1; i >= 0; i--) {
    const b = balloons[i];
    
    // ‰∏äÂçáËøêÂä®
    b.position.y += b.userData.speed;
    
    // Êõ¥Ëá™ÁÑ∂ÁöÑÂ∑¶Âè≥ÊëáÊëÜÔºåÂü∫‰∫éÊ∞îÁêÉÁöÑ‰ΩçÁΩÆÂíåÊó∂Èó¥
    const time = performance.now() * 0.001;
    const swayAmount = 0.002 * b.userData.scale; // Â§ßÊ∞îÁêÉÊëáÊëÜÊõ¥ÊòéÊòæ
    b.position.x += Math.sin(time * 0.8 + b.userData.swayOffset + b.position.y * 0.5) * swayAmount;
    
    // ËΩªÂæÆÁöÑÂâçÂêéÊëáÊëÜ
    b.position.z += Math.cos(time * 0.6 + b.userData.swayOffset) * swayAmount * 0.5;

    // ÁßªÈô§Ë∂ÖÂá∫Â±èÂπïÁöÑÊ∞îÁêÉ
    if (b.position.y > 6) {
      scene.remove(b);
      balloons.splice(i, 1);
    }
  }

  renderer.render(scene, camera);
}
